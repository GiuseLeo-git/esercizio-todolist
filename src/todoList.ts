import { StudentProfile } from './profile.js';
import { GradeModal } from './gradeModal.js';


interface Todo {
Â  Â  id: number;
Â  Â  text: string;
Â  Â  cfu: number;
Â  Â  completed: boolean;
Â  Â  grade: number | null;
Â  Â  lode: boolean;
Â  Â  createdAt: string;
}


export class TodoList {
Â  Â  todos: Todo[];
Â  Â  currentFilter: 'all' | 'active' | 'completed';
Â  Â  editingId: number | null;

Â  Â  // useMapRendering: boolean; // FLAG PER LA SCELTA DEL TIPO DI RENDERING (COMMENTATO)

Â  Â  todoForm: HTMLFormElement;
Â  Â  todoInput: HTMLInputElement;
Â  Â  todoList: HTMLElement;
Â  Â  tasksCounter: HTMLElement;
Â  Â  clearCompletedBtn: HTMLElement;
Â  Â  emptyState: HTMLElement;
Â  Â  filterBtns: NodeListOf<HTMLButtonElement>;

Â  Â  profile: StudentProfile;
Â  Â  gradeModal: GradeModal;

Â  Â  constructor() {
Â  Â  Â  Â  this.todos = JSON.parse(localStorage.getItem('todos') || '[]') as Todo[];
Â  Â  Â  Â  this.currentFilter = 'all';
Â  Â  Â  Â  this.editingId = null;

Â  Â  Â  Â  // this.useMapRendering = true; // Default uso .map() per il rendering (COMMENTATO)

Â  Â  Â  Â  this.todoForm = document.getElementById('todo-form') as HTMLFormElement;
Â  Â  Â  Â  this.todoInput = document.getElementById('todo-input') as HTMLInputElement;
Â  Â  Â  Â  this.todoList = document.getElementById('todo-list') as HTMLElement;
Â  Â  Â  Â  this.tasksCounter = document.getElementById('tasks-counter') as HTMLElement;
Â  Â  Â  Â  this.clearCompletedBtn = document.getElementById('clear-completed') as HTMLElement;
Â  Â  Â  Â  this.emptyState = document.getElementById('empty-state') as HTMLElement;
Â  Â  Â  Â  this.filterBtns = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLButtonElement>;

Â  Â  Â  Â  this.profile = new StudentProfile();
Â  Â  Â  Â  this.gradeModal = new GradeModal();

Â  Â  Â  Â  this.gradeModal.onSave = this.saveGradeFromModal.bind(this);

Â  Â  Â  Â  this.bindEvents();
Â  Â  Â  Â  this.render();
Â  Â  }


Â  Â  bindEvents(): void {
Â  Â  Â  Â  this.todoForm.addEventListener('submit', (e: SubmitEvent) => this.handleSubmit(e));
Â  Â  Â  Â  this.clearCompletedBtn.addEventListener('click', () => this.clearCompleted());

Â  Â  Â  Â  this.filterBtns.forEach(btn => {
Â  Â  Â  Â  Â  Â  btn.addEventListener('click', (e: MouseEvent) =>
Â  Â  Â  Â  Â  Â  Â  Â  this.setFilter((e.target as HTMLElement).dataset.filter as 'all' | 'active' | 'completed'));
Â  Â  Â  Â  });

Â  Â  Â  Â  window.addEventListener('beforeunload', () => this.saveToLocalStorage());
Â  Â  }


Â  Â  handleSubmit(e: SubmitEvent): void {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  const text = this.todoInput.value.trim();
Â  Â  Â  Â  if (!text) return;

Â  Â  Â  Â  if (this.editingId !== null) {
Â  Â  Â  Â  Â  Â  this.editTodo(this.editingId, text);
Â  Â  Â  Â  Â  Â  this.editingId = null;
Â  Â  Â  Â  Â  Â  this.todoForm.querySelector('.add-btn')!.innerHTML = '<i class="fas fa-plus"></i>';
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.addTodo(text);
Â  Â  Â  Â  }

Â  Â  Â  Â  this.todoInput.value = '';
Â  Â  Â  Â  this.todoInput.focus();
Â  Â  }


Â  Â  addTodo(text: string): void {
Â  Â  Â  Â  const cfu = Math.floor(Math.random() * 9) + 4;
Â  Â  Â  Â  const todo: Todo = {
Â  Â  Â  Â  Â  Â  id: Date.now(),
Â  Â  Â  Â  Â  Â  text,
Â  Â  Â  Â  Â  Â  cfu,
Â  Â  Â  Â  Â  Â  completed: false,
Â  Â  Â  Â  Â  Â  grade: null,
Â  Â  Â  Â  Â  Â  lode: false,
Â  Â  Â  Â  Â  Â  createdAt: new Date().toISOString()
Â  Â  Â  Â  };

Â  Â  Â  Â  this.todos.unshift(todo);
Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  this.render();
Â  Â  Â  Â  this.showNotification('Esame aggiunto!', 'success');
Â  Â  }


Â  Â  editTodo(id: number, newText: string, newCfu: number | null = null): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (todo) {
Â  Â  Â  Â  Â  Â  todo.text = newText;
Â  Â  Â  Â  Â  Â  if (newCfu !== null) todo.cfu = newCfu;
Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  this.render();
Â  Â  Â  Â  Â  Â  this.showNotification('Esame modificato!', 'success');
Â  Â  Â  Â  }
Â  Â  }


Â  Â  deleteTodo(id: number): void {
Â  Â  Â  Â  const todoElement = document.querySelector(`[data-id="${id}"]`) as HTMLElement | null;
Â  Â  Â  Â  if (todoElement) {
Â  Â  Â  Â  Â  Â  todoElement.classList.add('removing');
Â  Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  Â  Â  this.todos = this.todos.filter(t => t.id !== id);
Â  Â  Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  Â  Â  this.render();
Â  Â  Â  Â  Â  Â  Â  Â  this.showNotification('Esame eliminato!', 'info');
Â  Â  Â  Â  Â  Â  }, 300);
Â  Â  Â  Â  }
Â  Â  }


Â  Â  toggleTodo(id: number): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (todo) {
Â  Â  Â  Â  Â  Â  const wasCompleted = todo.completed;
Â  Â  Â  Â  Â  Â  todo.completed = !todo.completed;

Â  Â  Â  Â  Â  Â  if (todo.completed && !wasCompleted) {
Â  Â  Â  Â  Â  Â  Â  Â  this.promptForGrade(id);
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  this.render();

Â  Â  Â  Â  Â  Â  const message = todo.completed ? 'Esame superato! ðŸŽ‰' : 'Esame riattivato!';
Â  Â  Â  Â  Â  Â  this.showNotification(message, 'success');
Â  Â  Â  Â  }
Â  Â  }


Â  Â  clearCompleted(): void {
Â  Â  Â  Â  const completedCount = this.todos.filter(t => t.completed).length;
Â  Â  Â  Â  if (completedCount === 0) {
Â  Â  Â  Â  Â  Â  this.showNotification('Nessun esame superato da eliminare!', 'info');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  if (confirm(`Sei sicuro di voler eliminare ${completedCount} esami superati?`)) {
Â  Â  Â  Â  Â  Â  this.todos = this.todos.filter(t => !t.completed);
Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  this.render();
Â  Â  Â  Â  Â  Â  this.showNotification(`${completedCount} esami eliminati!`, 'success');
Â  Â  Â  Â  }
Â  Â  }


Â  Â  setFilter(filter: 'all' | 'active' | 'completed'): void {
Â  Â  Â  Â  this.currentFilter = filter;

Â  Â  Â  Â  this.filterBtns.forEach(btn => {
Â  Â  Â  Â  Â  Â  btn.classList.toggle('active', btn.dataset.filter === filter);
Â  Â  Â  Â  });

Â  Â  Â  Â  this.render();
Â  Â  }


Â  Â  getFilteredTodos(): Todo[] {
Â  Â  Â  Â  switch (this.currentFilter) {
Â  Â  Â  Â  Â  Â  case 'active':
Â  Â  Â  Â  Â  Â  Â  Â  return this.todos.filter(t => !t.completed);
Â  Â  Â  Â  Â  Â  case 'completed':
Â  Â  Â  Â  Â  Â  Â  Â  return this.todos.filter(t => t.completed);
Â  Â  Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  Â  Â  return this.todos;
Â  Â  Â  Â  }
Â  Â  }


Â  Â  startEdit(id: number): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (todo) {
Â  Â  Â  Â  Â  Â  this.editingId = id;
Â  Â  Â  Â  Â  Â  this.todoInput.value = todo.text;
Â  Â  Â  Â  Â  Â  this.todoInput.focus();
Â  Â  Â  Â  Â  Â  this.todoInput.select();

Â  Â  Â  Â  Â  Â  this.todoForm.querySelector('.add-btn')!.innerHTML = '<i class="fas fa-save"></i>';
Â  Â  Â  Â  }
Â  Â  }


Â  Â  cancelEdit(): void {
Â  Â  Â  Â  this.editingId = null;
Â  Â  Â  Â  this.todoInput.value = '';
Â  Â  Â  Â  this.todoForm.querySelector('.add-btn')!.innerHTML = '<i class="fas fa-plus"></i>';
Â  Â  }


Â  Â  promptForGrade(id: number): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (!todo) return;
Â  Â  Â  Â  this.gradeModal.open(id, todo.text);
Â  Â  }


Â  Â  editGrade(id: number): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (!todo) return;
Â  Â  Â  Â  this.gradeModal.open(id, todo.text, todo.grade, todo.lode);
Â  Â  }


Â  Â  saveGrade(id: number, gradeValue: string): void {
Â  Â  Â  Â  const todo = this.todos.find(t => t.id === id);
Â  Â  Â  Â  if (!todo) return;

Â  Â  Â  Â  if (gradeValue === '') {
Â  Â  Â  Â  Â  Â  this.showNotification('Inserisci un voto!', 'error');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const gradeNum = parseInt(gradeValue);
Â  Â  Â  Â  let lode = false;
Â  Â  Â  Â  if (gradeNum === 30) {
Â  Â  Â  Â  Â  Â  lode = this.gradeModal.gradeModalLode.checked;
Â  Â  Â  Â  }

Â  Â  Â  Â  if (gradeNum >= 18 && gradeNum <= 30) {
Â  Â  Â  Â  Â  Â  todo.grade = gradeNum;
Â  Â  Â  Â  Â  Â  todo.lode = lode;
Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  this.render();
Â  Â  Â  Â  Â  Â  this.showNotification(`Voto ${gradeNum}${lode ? ' e lode' : ''} registrato! ðŸŽ¯`, 'success');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.showNotification('Il voto deve essere tra 18 e 30!', 'error');
Â  Â  Â  Â  }
Â  Â  }


Â  Â  saveGradeFromModal(): void {
Â  Â  Â  Â  const gradeValue = this.gradeModal.gradeModalInput.value.trim();
Â  Â  Â  Â  if (gradeValue === '') {
Â  Â  Â  Â  Â  Â  this.showNotification('Inserisci un voto!', 'error');
Â  Â  Â  Â  Â  Â  this.gradeModal.gradeModalInput.focus();
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const gradeNum = parseInt(gradeValue);
Â  Â  Â  Â  let lode = false;
Â  Â  Â  Â  if (gradeNum === 30) {
Â  Â  Â  Â  Â  Â  lode = this.gradeModal.gradeModalLode.checked;
Â  Â  Â  Â  }

Â  Â  Â  Â  if (gradeNum >= 18 && gradeNum <= 30) {
Â  Â  Â  Â  Â  Â  const todo = this.todos.find(t => t.id === this.gradeModal.currentGradeId);
Â  Â  Â  Â  Â  Â  if (todo) {
Â  Â  Â  Â  Â  Â  Â  Â  todo.grade = gradeNum;
Â  Â  Â  Â  Â  Â  Â  Â  todo.lode = lode;
Â  Â  Â  Â  Â  Â  Â  Â  this.saveToLocalStorage();
Â  Â  Â  Â  Â  Â  Â  Â  this.render();
Â  Â  Â  Â  Â  Â  Â  Â  this.gradeModal.close();
Â  Â  Â  Â  Â  Â  Â  Â  this.showNotification(`Voto ${gradeNum}${lode ? ' e lode' : ''} registrato! ðŸŽ¯`, 'success');
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.showNotification('Il voto deve essere tra 18 e 30!', 'error');
Â  Â  Â  Â  Â  Â  this.gradeModal.gradeModalInput.focus();
Â  Â  Â  Â  }
Â  Â  }


Â  Â  saveToLocalStorage(): void {
Â  Â  Â  Â  localStorage.setItem('todos', JSON.stringify(this.todos));
Â  Â  }


Â  Â  render(): void {
Â  Â  Â  Â  console.log('Numero totale esami in this.todos:', this.todos.length);

Â  Â  Â  Â  const filteredTodos = this.getFilteredTodos();

Â  Â  Â  Â  console.log('Numero esami filtrati per visualizzazione:', filteredTodos.length);

Â  Â  Â  Â  const activeCount = this.todos.filter(t => !t.completed).length;
Â  Â  Â  Â  const completedCount = this.todos.filter(t => t.completed).length;
Â  Â  Â  Â  const gradedExams = this.todos.filter(t => t.completed && t.grade !== null);

Â  Â  Â  Â  let counterText = `${activeCount} da sostenere, ${completedCount} superati`;

Â  Â  Â  Â  if (gradedExams.length > 0) {
Â  Â  Â  Â  Â  Â  const average = Math.round(gradedExams.reduce((sum, exam) => sum + (exam.grade as number), 0) / gradedExams.length);
Â  Â  Â  Â  Â  Â  counterText += ` | Media: ${average}`;
Â  Â  Â  Â  }

Â  Â  Â  Â  this.tasksCounter.textContent = counterText;

Â  Â  Â  Â  this.updateProfileStats();

Â  Â  Â  Â  if (this.todos.length === 0 || filteredTodos.length === 0) {
Â  Â  Â  Â  Â  Â  this.emptyState.classList.add('show');
Â  Â  Â  Â  Â  Â  this.todoList.innerHTML = '';
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.emptyState.classList.remove('show');
Â  Â  Â  Â  Â  Â  // this.renderTodoList(filteredTodos);  // SOLO il metodo con .map() viene eseguito
Â  Â  Â  Â  Â  Â  this.todoList.innerHTML = filteredTodos.map(todo => this.createTodoElement(todo)).join('');
Â  Â  Â  Â  Â  Â  this.bindTodoEvents();
Â  Â  Â  Â  }

Â  Â  Â  Â  this.clearCompletedBtn.style.display = completedCount > 0 ? 'block' : 'none';
Â  Â  }


Â  Â  /*
Â  Â  // Metodo alternativo per il rendering con scelta via flag (COMMENTATO)
Â  Â  renderTodoList(todos: Todo[]): void {
Â  Â  Â  Â  if (this.useMapRendering) {
Â  Â  Â  Â  Â  Â  this.todoList.innerHTML = todos.map(todo => this.createTodoElement(todo)).join('');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.todoList.innerHTML = this.renderTodoListWithLoop(todos);
Â  Â  Â  Â  }
Â  Â  Â  Â  this.bindTodoEvents();
Â  Â  }

Â  Â  // Funzione alternativa con ciclo for per costruire gli elementi HTML (COMMENTATO)
Â  Â  renderTodoListWithLoop(todos: Todo[]): string {
Â  Â  Â  Â  let html = '';
Â  Â  Â  Â  for (let i = 0; i < todos.length; i++) {
Â  Â  Â  Â  Â  Â  html += this.createTodoElement(todos[i]);
Â  Â  Â  Â  }
Â  Â  Â  Â  return html;
Â  Â  }

Â  Â  // Metodo per impostare il metodo di rendering (COMMENTATO)
Â  Â  setRenderingMethod(useMap: boolean): void {
Â  Â  Â  Â  this.useMapRendering = useMap;
Â  Â  Â  Â  this.render();
Â  Â  }
Â  Â  */


Â  Â  createTodoElement(todo: Todo): string {
Â  Â  Â  Â  const completedClass = todo.completed ? 'completed' : '';
Â  Â  Â  Â  let gradeSection = '';
Â  Â  Â  Â  if (todo.completed) {
Â  Â  Â  Â  Â  Â  if (todo.grade !== null) {
Â  Â  Â  Â  Â  Â  Â  Â  gradeSection = `
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div class="todo-grade">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span class="grade-label">Voto:</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span class="grade-display">${todo.grade}${todo.lode ? ' e lode' : ''}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button class="action-btn grade-edit-btn" data-id="${todo.id}" title="Modifica voto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-edit"></i>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  `;
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  gradeSection = `
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div class="todo-grade">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span class="grade-label">Voto:</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" class="grade-input" placeholder="18-30" min="18" max="30" data-id="${todo.id}">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button class="action-btn grade-save-btn" data-id="${todo.id}" title="Salva voto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-save"></i>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  `;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  const selectBtn = !todo.completed
Â  Â  Â  Â  Â  Â  ? `<button class="todo-checkbox" data-id="${todo.id}" title="Seleziona esame"></button>`
Â  Â  Â  Â  Â  Â  : `<span class="todo-checkbox checked"></span>`;

Â  Â  Â  Â  return `
Â  Â  Â  Â  Â  Â  <li class="todo-item ${completedClass}" data-id="${todo.id}">
Â  Â  Â  Â  Â  Â  Â  Â  ${selectBtn}
Â  Â  Â  Â  Â  Â  Â  Â  <span class="todo-text">${this.escapeHtml(todo.text)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  ${gradeSection}
Â  Â  Â  Â  Â  Â  Â  Â  <div class="todo-actions">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button class="action-btn delete-btn" data-id="${todo.id}" title="Elimina">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-trash"></i>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  `;
Â  Â  }


Â  Â  bindTodoEvents(): void {
Â  Â  Â  Â  document.querySelectorAll('.todo-checkbox').forEach(checkbox => {
Â  Â  Â  Â  Â  Â  checkbox.addEventListener('click', (e: Event) => {
Â  Â  Â  Â  Â  Â  Â  Â  const id = parseInt((e.target as HTMLElement).dataset.id!);
Â  Â  Â  Â  Â  Â  Â  Â  this.toggleTodo(id);
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });

Â  Â  Â  Â  document.querySelectorAll('.grade-input').forEach(input => {
Â  Â  Â  Â  Â  Â  input.addEventListener('keypress', (e: Event) => {
Â  Â  Â  Â  Â  Â  Â  Â  const ke = e as KeyboardEvent;
Â  Â  Â  Â  Â  Â  Â  Â  if (ke.key === 'Enter') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const id = parseInt((e.target as HTMLElement).dataset.id!);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.saveGrade(id, (e.target as HTMLInputElement).value);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });

Â  Â  Â  Â  document.querySelectorAll('.grade-save-btn').forEach(btn => {
Â  Â  Â  Â  Â  Â  btn.addEventListener('click', (e: Event) => {
Â  Â  Â  Â  Â  Â  Â  Â  const id = parseInt(((e.target as HTMLElement).closest('.grade-save-btn') as HTMLElement)!.dataset.id!);
Â  Â  Â  Â  Â  Â  Â  Â  const input = document.querySelector(`.grade-input[data-id="${id}"]`) as HTMLInputElement | null;
Â  Â  Â  Â  Â  Â  Â  Â  if (input) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.saveGrade(id, input.value);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });

Â  Â  Â  Â  document.querySelectorAll('.grade-edit-btn').forEach(btn => {
Â  Â  Â  Â  Â  Â  btn.addEventListener('click', (e: Event) => {
Â  Â  Â  Â  Â  Â  Â  Â  const id = parseInt(((e.target as HTMLElement).closest('.grade-edit-btn') as HTMLElement)!.dataset.id!);
Â  Â  Â  Â  Â  Â  Â  Â  this.editGrade(id);
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });

Â  Â  Â  Â  document.querySelectorAll('.delete-btn').forEach(btn => {
Â  Â  Â  Â  Â  Â  btn.addEventListener('click', (e: Event) => {
Â  Â  Â  Â  Â  Â  Â  Â  const btnElem = (e.target as HTMLElement).closest('.delete-btn') as HTMLElement;
Â  Â  Â  Â  Â  Â  Â  Â  const id = parseInt(btnElem.dataset.id!);
Â  Â  Â  Â  Â  Â  Â  Â  this.deleteTodo(id);
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });
Â  Â  }


Â  Â  updateProfileStats(): void {
Â  Â  Â  Â  const total = this.todos.length;
Â  Â  Â  Â  const completed = this.todos.filter(t => t.completed).length;
Â  Â  Â  Â  const pending = this.todos.filter(t => !t.completed).length;
Â  Â  Â  Â  const average = this.calculateAverageGrade();

Â  Â  Â  Â  document.getElementById('total-exams')!.textContent = total.toString();
Â  Â  Â  Â  document.getElementById('completed-exams')!.textContent = completed.toString();
Â  Â  Â  Â  document.getElementById('pending-exams')!.textContent = pending.toString();
Â  Â  Â  Â  document.getElementById('average-grade')!.textContent = average ? average.toString() : '-';
Â  Â  }


Â  Â  calculateAverageGrade(): number | null {
Â  Â  Â  Â  const gradedExams = this.todos.filter(t => t.completed && t.grade !== null);
Â  Â  Â  Â  if (gradedExams.length === 0) return null;
Â  Â  Â  Â  return Math.round(gradedExams.reduce((sum, exam) => sum + (exam.grade as number), 0) / gradedExams.length);
Â  Â  }


Â  Â  escapeHtml(text: string): string {
Â  Â  Â  Â  const div = document.createElement('div');
Â  Â  Â  Â  div.textContent = text;
Â  Â  Â  Â  return div.innerHTML;
Â  Â  }


Â  Â  showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info'): void {
Â  Â  Â  Â  const notification = document.createElement('div');
Â  Â  Â  Â  notification.className = `notification notification-${type}`;
Â  Â  Â  Â  notification.innerHTML = `
Â  Â  Â  Â  Â  Â  <i class="fas fa-${this.getNotificationIcon(type)}"></i>
Â  Â  Â  Â  Â  Â  <span>${message}</span>
Â  Â  Â  Â  `;

Â  Â  Â  Â  notification.style.cssText = `
Â  Â  Â  Â  Â  Â  position: fixed;
Â  Â  Â  Â  Â  Â  top: 20px;
Â  Â  Â  Â  Â  Â  right: 20px;
Â  Â  Â  Â  Â  Â  background: ${this.getNotificationColor(type)};
Â  Â  Â  Â  Â  Â  color: white;
Â  Â  Â  Â  Â  Â  padding: 15px 20px;
Â  Â  Â  Â  Â  Â  border-radius: 10px;
Â  Â  Â  Â  Â  Â  box-shadow: 0 8px 25px rgba(0,0,0,0.2);
Â  Â  Â  Â  Â  Â  z-index: 1000;
Â  Â  Â  Â  Â  Â  display: flex;
Â  Â  Â  Â  Â  Â  align-items: center;
Â  Â  Â  Â  Â  Â  gap: 10px;
Â  Â  Â  Â  Â  Â  font-size: 0.9rem;
Â  Â  Â  Â  Â  Â  animation: slideInRight 0.3s ease-out;
Â  Â  Â  Â  `;

Â  Â  Â  Â  const style = document.createElement('style');
Â  Â  Â  Â  style.textContent = `
Â  Â  Â  Â  Â  Â  @keyframes slideInRight {
Â  Â  Â  Â  Â  Â  Â  Â  from { transform: translateX(100%); opacity: 0; }
Â  Â  Â  Â  Â  Â  Â  Â  to { transform: translateX(0); opacity: 1; }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  @keyframes slideOutRight {
Â  Â  Â  Â  Â  Â  Â  Â  from { transform: translateX(0); opacity: 1; }
Â  Â  Â  Â  Â  Â  Â  Â  to { transform: translateX(100%); opacity: 0; }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  `;
Â  Â  Â  Â  document.head.appendChild(style);

Â  Â  Â  Â  document.body.appendChild(notification);

Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  notification.style.animation = 'slideOutRight 0.3s ease-out forwards';
Â  Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  Â  Â  document.body.removeChild(notification);
Â  Â  Â  Â  Â  Â  }, 300);
Â  Â  Â  Â  }, 3000);
Â  Â  }


Â  Â  getNotificationIcon(type: 'success' | 'error' | 'warning' | 'info'): string {
Â  Â  Â  Â  switch (type) {
Â  Â  Â  Â  Â  Â  case 'success': return 'check-circle';
Â  Â  Â  Â  Â  Â  case 'error': return 'exclamation-circle';
Â  Â  Â  Â  Â  Â  case 'warning': return 'exclamation-triangle';
Â  Â  Â  Â  Â  Â  default: return 'info-circle';
Â  Â  Â  Â  }
Â  Â  }


Â  Â  getNotificationColor(type: 'success' | 'error' | 'warning' | 'info'): string {
Â  Â  Â  Â  switch (type) {
Â  Â  Â  Â  Â  Â  case 'success': return '#28a745';
Â  Â  Â  Â  Â  Â  case 'error': return '#dc3545';
Â  Â  Â  Â  Â  Â  case 'warning': return '#ffc107';
Â  Â  Â  Â  Â  Â  default: return '#17a2b8';
Â  Â  Â  Â  }
Â  Â  }
}


// Inizializza l'app quando il DOM Ã¨ caricato
document.addEventListener('DOMContentLoaded', () => {
Â  Â  const todoApp = new TodoList();

Â  Â  // Per usare il rendering con ciclo for (al momento commentato)
Â  Â  // todoApp.setRenderingMethod(false);

Â  Â  document.addEventListener('keydown', (e: KeyboardEvent) => {
Â  Â  Â  Â  if (e.key === 'Escape' && todoApp.editingId !== null) {
Â  Â  Â  Â  Â  Â  todoApp.cancelEdit();
Â  Â  Â  Â  }
Â  Â  });

Â  Â  // Codice opzionale per aggiungere sampleTodos puÃ² essere riattivato
});
